name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Skip some combinations to reduce CI load
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y dcm2niix

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install dcm2niix

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]

    - name: Run linting
      run: |
        ruff check llm_heuristics tests
        ruff format --check llm_heuristics tests



    - name: Run tests
      run: |
        pytest tests/ -v

  test-apptainer:
    name: Test Apptainer Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Apptainer
      run: |
        sudo apt-get update
        sudo apt-get install -y apptainer

    - name: Build Apptainer image
      run: |
        apptainer build llm-heuristics.sif Dockerfile

    - name: Test Apptainer image
      run: |
        apptainer run llm-heuristics.sif --help

  test-minimum-versions:
    name: Test Minimum Dependency Versions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"

    - name: Install minimum versions
      run: |
        python -m pip install --upgrade pip
        # Install minimum versions from pyproject.toml
        pip install heudiconv==1.3.0 pydicom==2.4.0 transformers==4.30.0
        pip install torch==2.0.0 pandas==1.5.0 numpy==1.24.0
        pip install click==8.0.0 pydantic==2.0.0 rich==13.0.0
        pip install jinja2==3.1.0 accelerate==0.20.0 bitsandbytes==0.41.0
        pip install datasets==2.12.0 bidsschematools==0.7.0 requests==2.28.0
        pip install pyyaml==6.0 jsonschema==4.0.0
        pip install -e .[test]

    - name: Run basic tests
      run: |
        python -c "import llm_heuristics; print('Package imports successfully')"
        pytest tests/test_bids_integration.py -v

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        pip install bandit
        bandit -r llm_heuristics -f json || true

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit
      run: |
        pre-commit run --all-files

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Build documentation
      run: |
        cd docs && make html

    - name: Upload documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/